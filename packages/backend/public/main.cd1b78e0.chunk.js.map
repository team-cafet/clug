{"version":3,"sources":["hooks/useGetAllFromService.tsx","services/auth.service.ts","services/api.service.ts","libs/interfaces/membershipPlan.interface.ts","services/member.service.ts","components/molecules/DataTable/BasicFilter.tsx","components/molecules/DataTable/DataTable.tsx","components/molecules/DataTable/UseFilterTypes.tsx","components/pages/Member/Member.tsx","services/club.service.ts","services/memberlabel.service.ts","services/membership-plan.service.ts","components/molecules/FormGroup.tsx","services/data-mapping.service.ts","contexts/GlobalContext.tsx","components/organisms/MemberForm.tsx","hooks/useUserOrganisation.tsx","components/pages/Member/MemberDetails.tsx","components/pages/Member/MemberAdd.tsx","routes/member.routes.tsx","components/pages/Club/Club.tsx","components/atoms/Button.tsx","components/atoms/Alert.tsx","components/organisms/ClubForm.tsx","components/pages/Club/ClubAdd.tsx","components/pages/Club/ClubDetails.tsx","routes/club.routes.tsx","components/pages/MembershipPlan/MembershipPlan.tsx","components/organisms/MembershipPlanForm.tsx","components/pages/MembershipPlan/MembershipPlanAdd.tsx","routes/membershipPlan.routes.tsx","components/pages/MemberLabel/MemberLabel.tsx","components/organisms/MemberLabelForm.tsx","components/pages/MemberLabel/MemberLabelAdd.tsx","components/pages/MemberLabel/MemberLabelDetails.tsx","routes/memberLabel.routes.tsx","components/molecules/DashboardCard.tsx","services/dashboard.service.ts","components/pages/Dashboard/Dashboard.tsx","services/membership.service.ts","services/payment.service.ts","services/paymentRequest.service.ts","components/molecules/paymentCard.tsx","components/pages/Payment/Payment.tsx","routes/payment.routes.tsx","routes/admin.routes.tsx","components/atoms/Logo.tsx","components/template/AdminLayout.tsx","components/template/BasicLayout.tsx","components/atoms/Input.tsx","components/organisms/LoginForm.tsx","components/pages/Login.tsx","components/pages/Home.tsx","components/pages/Logout.tsx","routes/routes.tsx","components/App.tsx","serviceWorker.ts","index.tsx","assets/logo/clug-logo-w.svg","assets/logout.svg"],"names":["useGetAllFromService","props","useState","data","setData","getAll","useCallback","a","service","result","useEffect","login","username","password","POST","setToken","token","setUserInfo","user","info","localStorage","setItem","JSON","stringify","getUserInfo","userConfig","getItem","parse","Error","getToken","METHODS","makeApiRequest","url","method","body","undefined","instance","axios","create","baseURL","defaults","headers","common","GET","PUT","PATCH","DELETE","get","params","post","put","patch","delete","PlanType","APIResource","resourceURL","this","id","memberService","BasicFilter","column","filterValue","preFilteredRows","setFilter","count","length","InputGroup","className","Append","Text","FormControl","value","onChange","e","target","placeholder","DataTable","useMemo","columns","filterTypes","React","text","rows","filter","row","rowValue","values","String","toLowerCase","startsWith","defaultColumn","Filter","useTable","initialState","pageIndex","pageSize","useFilters","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","page","pageCount","gotoPage","prepareRow","state","Table","map","headerGroup","getHeaderGroupProps","getHeaderProps","customRowProps","getRowProps","cells","cell","getCellProps","render","current","DataTablePagination","active","items","number","push","Pagination","Item","key","onClick","Prev","Next","SortingHeader","getSortByToggleProps","isSorted","isSortedDesc","FilterHeader","canFilter","Member","members","COLUMNS","Header","accessor","disableFilters","disableSortBy","Cell","DATA","member","name","firstname","lastname","negativeBalance","balance","to","index","GoToMemberBtn","component","Button","clubService","memberLabelService","membershipPlanService","FormGroup","label","type","formnikError","GlobalContextActions","getPlanName","weekly","monthly","quarterly","biannual","annual","generatePlanEndDate","startDate","planType","endDate","moment","add","console","log","toDate","MemberForm","displayAlertMemberSaved","setDisplayAlertMemberSaved","availableMemberLabels","avaiableClubs","membershipPlanList","planSelectedId","setPlanSelectedId","format","setStartDate","history","useHistory","initialValues","memberLabels","club","email","birthdate","phone","street","streetNumber","city","postalCode","global","submit","formHelper","setSubmitting","setFieldError","find","availabelLabel","Number","parseInt","planSelected","plan","update","organisation","organisationID","memberships","Date","backToMemberPage","error","message","updateMode","validate","errors","onSubmit","isSubmitting","setFieldValue","variant","onClose","dismissible","children","multiple","hidden","as","event","class","price","disabled","useUserOrganisation","orgID","setOrgID","userInfo","MemberDetails","useParams","setMember","getByID","getAMember","MemberAdd","MemberRoutes","path","useRouteMatch","exact","Club","clubs","setClubs","getAllClubs","ClubRow","Alert","ClubForm","ClubAdd","window","back","ClubDetails","setClub","getAClub","ClubRoutes","MembershipPlan","plans","getAllMembershipPlans","tacit","refreshList","MembershipPlanAction","deletePlan","MembershipPlanForm","membershipPlan","description","typeList","setTypeList","typeSelectedId","setTypeSelectedId","tacitSelected","setTacitSelected","getAllTypes","types","fetchTypes","htmlFor","MembershipPlanAdd","planToUpdate","setPlanToUpdate","fetchData","MembershipPlanRoute","MemberLabel","setMemberLabels","getAllMemberLabel","LabelRow","MemberLabelForm","MemberLabelAdd","MemberLabelDetails","setLabel","MemberLabelRoutes","DashboardCard","dashboardService","Dashboard","stats","setStats","request","birthdays","negativeBalanceUsers","membershipService","paymentService","paymentRequestService","PaymentCard","memberShip","onPaymentReceivedFunction","alreadyRequested","setAlreadyRequested","paymentRequest","createPaymentRequest","membership","amount","date","newPaymentRequest","createPayment","paymentData","hasBeenCanceled","newPayment","createPaymentWithoutRequest","payment","Payment","setMemberships","getNotPaidMemberships","getNotPaid","paymentReceived","PaymentRoute","AdminRoutes","Logo","src","LogoImg","alt","AdminLayout","isDesktopOrLaptop","useMediaQuery","query","isMenuOpen","setIsMenuOpen","LogoutIcon","Nav","displayName","link","activeStyle","fontWeight","color","BasicLayout","INITIAL_STATE","isAuthentified","GlobalContext","createContext","GlobalContextProvider","useReducer","action","INIT_APP","HAS_LOGIN","LOGOUT","clear","dispatch","Provider","Input","forwardRef","ref","LoginForm","setError","usernameInp","useRef","passwordInp","globalContext","useContext","preventDefault","Login","Home","Logout","globalCtxt","Routes","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.cd1b78e0.chunk.js","sourcesContent":["import { useEffect, useState, useCallback, useMemo } from 'react';\r\nimport { APIResource } from '../services/api.service';\r\n\r\nexport function useGetAllFromService<T>(props: {\r\n  service: APIResource;\r\n}): [T[], () => void] {\r\n  const [data, setData] = useState<T[]>([]);\r\n\r\n  const getAll = useCallback(async () => {\r\n    const result = await props.service.getAll();\r\n    if (result) {\r\n      setData(result.data);\r\n    }\r\n  }, [props.service]);\r\n\r\n  useEffect(() => {\r\n    getAll();\r\n  }, [getAll]);\r\n\r\n  return [data, getAll];\r\n}\r\n","import { POST } from './api.service';\r\n\r\nconst LS_USER_INFO = 'LS_USER_INFO';\r\nconst LS_TOKEN = 'LS_TOKEN';\r\n\r\n/**\r\n * Following inteface must be the same as IUserInfo in backend\r\n */\r\ninterface IUserInfo {\r\n  id: number;\r\n  username:string;\r\n  organisation: {\r\n    id: number;\r\n  } | null;\r\n  group: {\r\n    id: number\r\n  };\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} username\r\n * @param {*} password\r\n */\r\nexport async function login(username: string, password: string) {\r\n  const result = await POST('auth/login', { username, password });\r\n  const data: {user:IUserInfo, token:string} = result?.data;\r\n  setToken(data.token);\r\n  setUserInfo(data.user);\r\n  return result;\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} info\r\n */\r\nfunction setUserInfo(info: IUserInfo) {\r\n  if (!info) {\r\n    return;\r\n  }\r\n\r\n  localStorage.setItem(LS_USER_INFO, JSON.stringify(info));\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport function getUserInfo(): IUserInfo | null {\r\n  const userConfig = localStorage.getItem(LS_USER_INFO);\r\n\r\n  if (!userConfig) {\r\n    return null;\r\n  }\r\n\r\n  return JSON.parse(userConfig);\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} token\r\n */\r\nfunction setToken(token: string) {\r\n  if (!token) {\r\n    throw Error('no_token_defined');\r\n  }\r\n  localStorage.setItem(LS_TOKEN, token);\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport function getToken() {\r\n  return localStorage.getItem(LS_TOKEN);\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport function logout() {\r\n  localStorage.clear();\r\n}\r\n","import axios from 'axios';\r\nimport { getToken } from './auth.service';\r\n\r\nconst API_URL = '/api/';\r\n\r\n/**\r\n * Define all possible HTTP METHODS\r\n */\r\nexport enum METHODS {\r\n  GET = 'GET',\r\n  POST = 'POST',\r\n  PUT = 'PUT',\r\n  PATCH = 'PATCH',\r\n  DELETE = 'DELETE',\r\n}\r\n\r\n/**\r\n * General purpose function to make a request on the api\r\n * @param {*} url\r\n * @param {*} method\r\n * @param {*} body\r\n */\r\nexport async function makeApiRequest(\r\n  url: string,\r\n  method: METHODS,\r\n  body: any = undefined\r\n) {\r\n  const instance = axios.create({ baseURL: API_URL });\r\n\r\n  // The following code set the authoritzazion header\r\n  const token = getToken();\r\n  if (token) {\r\n    instance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  switch (method) {\r\n    case METHODS.GET:\r\n      return instance.get(url, { params: body });\r\n\r\n    case METHODS.POST:\r\n      return instance.post(url, body);\r\n\r\n    case METHODS.PUT:\r\n      return instance.put(url, body);\r\n\r\n    case METHODS.PATCH:\r\n      return instance.patch(url, body);\r\n\r\n    case METHODS.DELETE:\r\n      return instance.delete(url);\r\n\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\n/**\r\n * Simply request with GET method\r\n * @param {*} url\r\n */\r\nexport function GET(url: string, body?: any) {\r\n  return makeApiRequest(url, METHODS.GET, body);\r\n}\r\n\r\n/**\r\n * Simply request with POST method\r\n * @param {*} url\r\n * @param {*} body\r\n */\r\nexport function POST(url: string, body: any) {\r\n  return makeApiRequest(url, METHODS.POST, body);\r\n}\r\n\r\n/**\r\n * Simply request with PUT method\r\n * @param {*} url\r\n * @param {*} body\r\n */\r\nexport function PUT(url: string, body: any) {\r\n  return makeApiRequest(url, METHODS.PUT, body);\r\n}\r\n\r\n/**\r\n * Simply request with PATCH method\r\n * @param {*} url\r\n * @param {*} body\r\n */\r\nexport function PATCH(url: string, body: any) {\r\n  return makeApiRequest(url, METHODS.PATCH, body);\r\n}\r\n\r\n/**\r\n * Simply request with DELETE method\r\n * @param {*} url\r\n */\r\nexport function DELETE(url: string) {\r\n  return makeApiRequest(url, METHODS.DELETE);\r\n}\r\n\r\n/**\r\n * Generic class for REST API resources\r\n */\r\nexport class APIResource {\r\n  constructor(private resourceURL: string) {}\r\n\r\n  /**\r\n   * Get all resources records\r\n   */\r\n  getAll() {\r\n    return GET(this.resourceURL);\r\n  }\r\n\r\n  /**\r\n   * Get a specific resource record\r\n   * @param {*} id\r\n   */\r\n  getByID(id: number) {\r\n    return GET(`${this.resourceURL}/${id}`);\r\n  }\r\n\r\n  /**\r\n   * Add a resource record\r\n   * @param {*} body\r\n   */\r\n  add(body: any) {\r\n    return POST(this.resourceURL, body);\r\n  }\r\n\r\n  /**\r\n   * Update a resource record\r\n   * @param {*} id\r\n   * @param {*} body\r\n   */\r\n  update(id: number, body: any) {\r\n    return PUT(`${this.resourceURL}/${id}`, body);\r\n  }\r\n\r\n  /**\r\n   * Delete a resource record\r\n   * @param {*} id\r\n   */\r\n  delete(id: number) {\r\n    return DELETE(`${this.resourceURL}/${id}`);\r\n  }\r\n}\r\n","import { IMembership } from \"./membership.interface\";\r\n\r\nexport interface IMembershipPlan {\r\n  id: number;\r\n  price: number;\r\n  description?: string;\r\n  type: number;\r\n  tacit: boolean;\r\n  memberships: IMembership[];\r\n}\r\n\r\nexport enum PlanType {\r\n  weekly,\r\n  monthly,\r\n  quarterly,\r\n  biannual,\r\n  annual,\r\n}\r\n","import { APIResource } from './api.service';\r\n\r\nexport const memberService = new APIResource('members');","import React from 'react';\r\nimport { InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nexport const BasicFilter = ({\r\n  column: { filterValue, preFilteredRows, setFilter },\r\n}: any) => {\r\n  const count = preFilteredRows.length;\r\n\r\n  return (\r\n    <InputGroup className=\"mb-3\">\r\n      <InputGroup.Append>\r\n        {/* eslint-disable-next-line jsx-a11y/accessible-emoji*/}\r\n        <InputGroup.Text>🔎</InputGroup.Text>\r\n      </InputGroup.Append>\r\n      <FormControl\r\n        value={filterValue || ''}\r\n        onChange={(e) => {\r\n          // Set undefined to remove the filter entirely\r\n          setFilter(e.target.value || undefined);\r\n        }}\r\n        placeholder={`Search ${count} records...`}\r\n      />\r\n    </InputGroup>\r\n  );\r\n};\r\n","import React, { useMemo } from 'react';\r\nimport {\r\n  useTable,\r\n  Column,\r\n  useSortBy,\r\n  useFilters,\r\n  usePagination,\r\n} from 'react-table';\r\nimport { Table, Pagination } from 'react-bootstrap';\r\nimport { BasicFilter } from './BasicFilter';\r\nimport { useFilterTypes } from './UseFilterTypes';\r\n\r\ninterface IProps {\r\n  id?: string;\r\n  className?: string;\r\n  pageSize?: number;\r\n  data: any[];\r\n  columns: Column[];\r\n  customRowProps?: (row: any) => any;\r\n}\r\n\r\nexport interface IDataTableColumns {}\r\n\r\nexport const DataTable = (props: IProps) => {\r\n  const data = useMemo(() => props.data, [props.data]);\r\n  const columns = useMemo(() => props.columns, [props.columns]);\r\n\r\n  const filterTypes = useFilterTypes();\r\n\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      // Add a basic text filter to all column that haven't disable filtering\r\n      Filter: BasicFilter,\r\n    }),\r\n    []\r\n  );\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      defaultColumn,\r\n      filterTypes,\r\n      initialState: { pageIndex: 0, pageSize: props.pageSize || 20 },\r\n    } as any,\r\n    useFilters,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    page,\r\n    pageCount,\r\n    gotoPage,\r\n    prepareRow,\r\n    state: { pageIndex },\r\n  } = tableInstance as any;\r\n\r\n  return (\r\n    <>\r\n      <Table id={props.id} className={props.className} {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup: any) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column: any) => (\r\n                <th {...column.getHeaderProps()}>\r\n                  <SortingHeader column={column} />\r\n                  <FilterHeader column={column}/>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n\r\n        {/* Apply the table body props */}\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map((row: any) => {\r\n            prepareRow(row);\r\n            const customRowProps = props.customRowProps\r\n              ? props.customRowProps(row)\r\n              : {};\r\n\r\n            return (\r\n              <tr {...row.getRowProps(customRowProps)}>\r\n                {row.cells.map((cell: any) => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n      <DataTablePagination\r\n        pageCount={pageCount}\r\n        current={pageIndex}\r\n        gotoPage={gotoPage}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst DataTablePagination = (props: {\r\n  pageCount: number;\r\n  current: number;\r\n  gotoPage: (pageIndex: any) => void;\r\n}) => {\r\n  const active = props.current;\r\n  const items = [];\r\n  for (let number = 1; number <= props.pageCount; number++) {\r\n    items.push(\r\n      <Pagination.Item\r\n        key={number}\r\n        active={number - 1 === active}\r\n        onClick={() => props.gotoPage(number - 1)}\r\n      >\r\n        {number}\r\n      </Pagination.Item>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Pagination>\r\n      {active - 1 >= 0 && (\r\n        <Pagination.Prev onClick={() => props.gotoPage(active - 1)} />\r\n      )}\r\n      {items}\r\n      {active + 1 < props.pageCount && (\r\n        <Pagination.Next onClick={() => props.gotoPage(active + 1)} />\r\n      )}\r\n    </Pagination>\r\n  );\r\n};\r\n\r\nconst SortingHeader = ({ column }: { column: any }) => (\r\n  <div {...column.getSortByToggleProps()}>\r\n    {column.render('Header')}\r\n    <span>{column.isSorted ? (column.isSortedDesc ? ' 🔽' : ' 🔼') : ''}</span>\r\n  </div>\r\n);\r\n\r\nconst FilterHeader = ({ column }: { column: any }) => (\r\n  <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n);\r\n","import React from 'react';\r\n\r\nexport const useFilterTypes = () => {\r\n  return React.useMemo(\r\n    () => ({\r\n      text: (rows: any, id: any, filterValue: any) => {\r\n        return rows.filter((row: any) => {\r\n          const rowValue = row.values[id];\r\n          return rowValue !== undefined\r\n            ? String(rowValue)\r\n                .toLowerCase()\r\n                .startsWith(String(filterValue).toLowerCase())\r\n            : true;\r\n        });\r\n      },\r\n    }),\r\n    []\r\n  );\r\n};\r\n","import React, { useMemo } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { useGetAllFromService } from '../../../hooks/useGetAllFromService';\r\nimport { IMember } from '../../../libs/interfaces/member.interface';\r\nimport { memberService } from '../../../services/member.service';\r\nimport { DataTable } from '../../molecules/DataTable';\r\nimport './style.scss';\r\n\r\n\r\nexport const Member = () => {\r\n  const [members] = useGetAllFromService<IMember>({service: memberService});\r\n\r\n  const COLUMNS: any[] = [\r\n    {\r\n      Header: 'Nom',\r\n      accessor: 'name',\r\n    },\r\n    {\r\n      Header: '',\r\n      accessor: 'id',\r\n      disableFilters: true,\r\n      disableSortBy: true,\r\n      Cell: (cell: any) => <GoToMemberBtn id={cell.value} />,\r\n    },\r\n  ];\r\n\r\n  const DATA = useMemo(\r\n    () =>\r\n      members.map((member) => ({\r\n        id: member.id,\r\n        name: `${member.user?.firstname} ${member.user?.lastname}`,\r\n        negativeBalance: member.balance < 0,\r\n      })),\r\n    [members]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <h1>Membres</h1>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <Link to=\"/admin/members/add\" className=\"btn btn-primary\">\r\n            Ajouter\r\n          </Link>\r\n        </div>\r\n        <div className=\"row\">\r\n          <DataTable\r\n            data={DATA}\r\n            columns={COLUMNS}\r\n            customRowProps={(row: any) => ({\r\n              className: DATA[row.index].negativeBalance\r\n                ? 'member-table__row--negative-balance'\r\n                : '',\r\n            })}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst GoToMemberBtn = (props: { id: number }) => {\r\n  return (\r\n    <Link component={Button} to={`/admin/members/${props.id}`}>\r\n      ...\r\n    </Link>\r\n  );\r\n};\r\n","import { APIResource } from './api.service';\r\n\r\nexport const clubService = new APIResource('clubs');","import { APIResource } from './api.service';\r\n\r\nexport const memberLabelService = new APIResource('memberlabels');\r\n","import { APIResource, GET } from './api.service';\r\nclass APIMembershipPlan extends APIResource {\r\n  constructor() {\r\n    super('membership-plans');\r\n  }\r\n  getAllTypes() {\r\n    return GET('membership-plans/types');\r\n  }\r\n}\r\n\r\nexport const membershipPlanService = new APIMembershipPlan();\r\n","import React from 'react';\r\nimport { ErrorMessage, Field } from 'formik';\r\n\r\ninterface IProps {\r\n  className?: string;\r\n  label: string;\r\n  type: 'text' | 'date' | 'number' | 'password';\r\n  formnikError: string | undefined;\r\n  name: string;\r\n}\r\n\r\nexport const FormGroup = ({ className, label, type, formnikError, name }: IProps) => (\r\n  <div className={`form-group ${className}`}>\r\n    <label>{label}</label>\r\n    <Field\r\n      className={`form-control ${formnikError ? 'is-invalid' : ''}`}\r\n      name={name}\r\n      type={type}\r\n    />\r\n    <ErrorMessage name={name} component=\"div\" className=\"invalid-feedback\" />\r\n  </div>\r\n);\r\n","import { PlanType } from '../libs/interfaces/membershipPlan.interface';\r\nimport moment from 'moment';\r\n\r\nexport const getPlanName = (id: number | undefined): string => {\r\n  switch (id) {\r\n    case PlanType.weekly:\r\n      return 'hebdomadaire';\r\n    case PlanType.monthly:\r\n      return 'mensuel';\r\n    case PlanType.quarterly:\r\n      return 'trimestriel';\r\n    case PlanType.biannual:\r\n      return 'semestriel';\r\n    case PlanType.annual:\r\n      return 'annuel';\r\n    default:\r\n      return 'spécial';\r\n  }\r\n};\r\n\r\nexport const generatePlanEndDate = (startDate: Date, planType?: number): Date => {\r\n  let endDate = moment();\r\n  \r\n  switch (planType) {\r\n    case PlanType.weekly:\r\n      endDate.add(1, 'weeks');\r\n      break;\r\n    case PlanType.monthly:\r\n      endDate.add(1, 'months');\r\n      break;\r\n    case PlanType.quarterly:\r\n      endDate.add(3, 'months');\r\n      break;\r\n    case PlanType.biannual:\r\n      endDate.add(6, 'months');\r\n      break;\r\n    case PlanType.annual:\r\n      endDate.add(1, 'years');\r\n      break;\r\n      default: console.log('not a valid type')\r\n  }\r\n\r\n  return endDate.toDate()\r\n};\r\n","import React, { useReducer, useEffect } from 'react';\r\nimport { getToken } from '../services/auth.service';\r\nimport { logout } from '../services/auth.service';\r\n\r\ninterface IProps {\r\n  children: any;\r\n}\r\n\r\ninterface IGlobalContextState {\r\n  isAuthentified: boolean;\r\n}\r\n\r\ninterface IGlobalContextAction {\r\n  type: GlobalContextActions;\r\n  payload?: any;\r\n}\r\n\r\nexport enum GlobalContextActions {\r\n  INIT_APP,\r\n  HAS_LOGIN,\r\n  LOGOUT,\r\n}\r\n\r\nconst INITIAL_STATE: IGlobalContextState = {\r\n  isAuthentified: false,\r\n};\r\n\r\nexport const GlobalContext = React.createContext<{\r\n  state: IGlobalContextState;\r\n  dispatch: React.Dispatch<IGlobalContextAction>;\r\n} | null>(null);\r\n\r\nexport const GlobalContextProvider = (props: IProps) => {\r\n  const [state, dispatch] = useReducer(\r\n    (state: IGlobalContextState, action: IGlobalContextAction) => {\r\n      switch (action.type) {\r\n        case GlobalContextActions.INIT_APP:\r\n          return { ...state, isAuthentified: getToken() !== null };\r\n\r\n        case GlobalContextActions.HAS_LOGIN:\r\n          return { ...state, isAuthentified: true };\r\n\r\n        case GlobalContextActions.LOGOUT:\r\n          logout();\r\n          return INITIAL_STATE;\r\n\r\n        default:\r\n          return state;\r\n      }\r\n    },\r\n    INITIAL_STATE\r\n  );\r\n\r\n  useEffect(() => dispatch({ type: GlobalContextActions.INIT_APP }), []);\r\n\r\n  return (\r\n    <GlobalContext.Provider value={{ state, dispatch }}>\r\n      {props.children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n","import { ErrorMessage, Field, Form, Formik, FormikHelpers } from 'formik';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Alert, Button } from 'react-bootstrap';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useGetAllFromService } from '../../hooks/useGetAllFromService';\r\nimport { IClub } from '../../libs/interfaces/club.interface';\r\nimport { IMember } from '../../libs/interfaces/member.interface';\r\nimport { IMemberLabel } from '../../libs/interfaces/memberLabel.interface';\r\nimport { IMembershipPlan } from '../../libs/interfaces/membershipPlan.interface';\r\nimport { clubService } from '../../services/club.service';\r\nimport { memberService } from '../../services/member.service';\r\nimport { memberLabelService } from '../../services/memberlabel.service';\r\nimport { membershipPlanService } from '../../services/membership-plan.service';\r\nimport { FormGroup } from '../molecules/FormGroup';\r\nimport moment from 'moment';\r\nimport { generatePlanEndDate, getPlanName } from '../../services/data-mapping.service';\r\n\r\ninterface IFormValue {\r\n  global: string;\r\n  memberLabels: number[];\r\n  club: undefined | number;\r\n  user: {\r\n    email: string;\r\n    firstname: string;\r\n    lastname: string;\r\n    birthdate: Date | string;\r\n    phone: string;\r\n    street: string;\r\n    streetNumber: undefined | number;\r\n    city: string;\r\n    postalCode: undefined | number;\r\n  };\r\n}\r\n\r\ninterface IProps {\r\n  member?: IMember;\r\n  organisationID: number;\r\n}\r\n\r\nexport const MemberForm = (props: IProps) => {\r\n  const [displayAlertMemberSaved, setDisplayAlertMemberSaved] = useState(false);\r\n  const [availableMemberLabels] = useGetAllFromService<IMemberLabel>({\r\n    service: memberLabelService,\r\n  });\r\n  const [avaiableClubs] = useGetAllFromService<IClub>({\r\n    service: clubService,\r\n  });\r\n\r\n  const [membershipPlanList, setMembershipPlanList] = useGetAllFromService<IMembershipPlan>({\r\n    service: membershipPlanService,\r\n  });\r\n  const [planSelectedId, setPlanSelectedId] = useState('0');\r\n  const [startDate, setStartDate] = useState(moment().format('YYYY-MM-DD'));\r\n\r\n  const history = useHistory();\r\n  let initialValues: IFormValue = {\r\n    memberLabels: [],\r\n    club: undefined,\r\n    user: {\r\n      email: '',\r\n      firstname: '',\r\n      lastname: '',\r\n      birthdate: '',\r\n      phone: '',\r\n      street: '',\r\n      streetNumber: undefined,\r\n      city: '',\r\n      postalCode: undefined,\r\n    },\r\n    global: '',\r\n  };\r\n\r\n  if (props.member) {\r\n    initialValues.memberLabels =\r\n      props.member.memberLabels?.map((label) => label.id) || [];\r\n    initialValues.club = props.member.club?.id;\r\n    initialValues.user = { ...initialValues.user, ...props.member.user };\r\n    console.log(initialValues);\r\n  }\r\n\r\n  const validate = (values: IFormValue) => {\r\n    const errors: any = {};\r\n\r\n    if (!values.user.email) {\r\n      errors.user = { ...errors.user };\r\n      errors.user.email = 'Requis';\r\n    }\r\n\r\n    if (!values.user.birthdate) {\r\n      errors.user = { ...errors.user };\r\n      errors.user.birthdate = 'Requis';\r\n    }\r\n\r\n    return errors;\r\n  };\r\n\r\n  const submit = async (\r\n    values: IFormValue,\r\n    formHelper: FormikHelpers<IFormValue>\r\n  ) => {\r\n    const { setSubmitting, setFieldError } = formHelper;\r\n\r\n    try {\r\n      (values as any) = {\r\n        ...values,\r\n        // tag send to the server must be at least have id and name\r\n        memberLabels: values.memberLabels.map((label: any) =>\r\n          availableMemberLabels.find(\r\n            (availabelLabel) => availabelLabel.id === Number.parseInt(label)\r\n          )\r\n        ),\r\n      };\r\n      const planSelected = membershipPlanList.find(\r\n        (plan) => plan.id === parseInt(planSelectedId)\r\n      );\r\n      if (props.member?.id) {\r\n        await memberService.update(props.member.id, values);\r\n      } else {\r\n        const newMember = await memberService.add({\r\n          ...values,\r\n          organisation: { id: props.organisationID },\r\n          memberships: planSelected\r\n            ? [\r\n                {\r\n                  startDate: new Date(startDate),\r\n                  endDate: generatePlanEndDate(\r\n                    new Date(startDate),\r\n                    planSelected?.type\r\n                  ),\r\n                  plan: planSelected,\r\n                },\r\n              ]\r\n            : [],\r\n        });\r\n      }\r\n      backToMemberPage();\r\n    } catch (err) {\r\n      console.error(err);\r\n      if (err.message) {\r\n        setFieldError('global', err.message);\r\n      } else {\r\n        setFieldError('global', 'Erreur serveur...');\r\n      }\r\n    }\r\n    setSubmitting(false);\r\n  };\r\n  const backToMemberPage = () => {\r\n    history.push('/admin/members');\r\n  };\r\n\r\n  const changePlanSelected = (id: string) => {\r\n    setPlanSelectedId(id);\r\n  };\r\n\r\n  const updateMode = () => {\r\n    if (props.member?.id) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Formik initialValues={initialValues} validate={validate} onSubmit={submit}>\r\n      {({ isSubmitting, errors, setFieldValue, values }) => (\r\n        <Form>\r\n          {displayAlertMemberSaved && (\r\n            <Alert\r\n              variant=\"success\"\r\n              onClose={() => setDisplayAlertMemberSaved(false)}\r\n              dismissible\r\n            >\r\n              Le membre a bien été sauvé !\r\n            </Alert>\r\n          )}\r\n\r\n          <ErrorMessage\r\n            name=\"global\"\r\n            component={(props) => (\r\n              <Alert variant=\"danger\">{props.children}</Alert>\r\n            )}\r\n          />\r\n\r\n          {/* General member information */}\r\n          <div>\r\n            <h2>Tag</h2>\r\n            <Field\r\n              component=\"select\"\r\n              multiple={true}\r\n              name=\"memberLabels\"\r\n              className=\"form-control\"\r\n            >\r\n              {availableMemberLabels.map((label) => (\r\n                <option key={label.id} value={label.id}>\r\n                  {label.name}\r\n                </option>\r\n              ))}\r\n            </Field>\r\n\r\n            <h2>Club</h2>\r\n            <Field\r\n              component=\"select\"\r\n              multiple={false}\r\n              name=\"club\"\r\n              className=\"form-control\"\r\n            >\r\n              {avaiableClubs.map((club) => (\r\n                <option key={club.id} value={club.id}>\r\n                  {club.name}\r\n                </option>\r\n              ))}\r\n            </Field>\r\n\r\n            <h2>Informations générales</h2>\r\n\r\n            <FormGroup\r\n              label=\"Email\"\r\n              type=\"text\"\r\n              formnikError={errors.user?.email}\r\n              name=\"user.email\"\r\n            />\r\n\r\n            <FormGroup\r\n              label=\"Nom\"\r\n              type=\"text\"\r\n              formnikError={errors.user?.lastname}\r\n              name=\"user.lastname\"\r\n            />\r\n            <FormGroup\r\n              label=\"Prénom\"\r\n              type=\"text\"\r\n              formnikError={errors.user?.firstname}\r\n              name=\"user.firstname\"\r\n            />\r\n\r\n            <FormGroup\r\n              label=\"Date de naissance\"\r\n              type=\"date\"\r\n              formnikError={errors.user?.birthdate}\r\n              name=\"user.birthdate\"\r\n            />\r\n\r\n            <FormGroup\r\n              label=\"Téléphone\"\r\n              type=\"text\"\r\n              formnikError={errors.user?.phone}\r\n              name=\"user.phone\"\r\n            />\r\n\r\n            <h2>Adresse</h2>\r\n\r\n            <div className=\"form-row\">\r\n              <FormGroup\r\n                className=\"col-8\"\r\n                label=\"Rue\"\r\n                type=\"text\"\r\n                formnikError={errors.user?.street}\r\n                name=\"user.street\"\r\n              />\r\n              <FormGroup\r\n                className=\"col\"\r\n                label=\"Numéro\"\r\n                type=\"number\"\r\n                formnikError={errors.user?.streetNumber}\r\n                name=\"user.streetNumber\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-row\">\r\n              <FormGroup\r\n                className=\"col-4\"\r\n                label=\"NPA\"\r\n                type=\"number\"\r\n                formnikError={errors.user?.postalCode}\r\n                name=\"user.postalCode\"\r\n              />\r\n              <FormGroup\r\n                className=\"col\"\r\n                label=\"Ville\"\r\n                type=\"text\"\r\n                formnikError={errors.user?.city}\r\n                name=\"user.city\"\r\n              />\r\n            </div>\r\n            <h2>Abonnement</h2>\r\n            {/* On update, this feature will be more complex. Need more analysis on this point */}\r\n            <div className=\"form-row\" hidden={updateMode()}>\r\n              <Field\r\n                as=\"select\"\r\n                name=\"membershipSelect\"\r\n                onChange={(event: { target: any }) => {\r\n                  changePlanSelected(event.target.value);\r\n                }}\r\n                class=\"form-control\"\r\n              >\r\n                {membershipPlanList.map((plan) => (\r\n                  <option key={plan.id} value={plan.id}>\r\n                    {`${getPlanName(plan.type)}, ${plan.price}.-`}\r\n                  </option>\r\n                ))}\r\n              </Field>\r\n              <Field\r\n                placeholder=\"Début\"\r\n                name=\"startDate\"\r\n                type=\"date\"\r\n                onChange={(event: { target: any }) => {\r\n                  setStartDate(event.target.value);\r\n                }}\r\n                value={startDate}\r\n                class=\"form-control\"\r\n              ></Field>\r\n            </div>\r\n          </div>\r\n\r\n          <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\r\n            Sauver\r\n          </Button>\r\n          <Link to=\"/admin/members\">\r\n            <Button variant=\"secondary\">Annuler</Button>\r\n          </Link>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getUserInfo } from \"../services/auth.service\";\r\n\r\nexport const useUserOrganisation = (): [number, any]=> {\r\n  const [orgID, setOrgID] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const userInfo = getUserInfo();\r\n    if (userInfo?.organisation?.id) {\r\n      setOrgID(userInfo?.organisation.id);\r\n    }\r\n  }, []);\r\n\r\n  return [orgID, setOrgID];\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { IMember } from '../../../libs/interfaces/member.interface';\r\nimport { memberService } from '../../../services/member.service';\r\nimport { useParams } from 'react-router-dom';\r\nimport { MemberForm } from '../../organisms/MemberForm';\r\nimport { useUserOrganisation } from '../../../hooks/useUserOrganisation';\r\n\r\ninterface IProps {}\r\n\r\nexport const MemberDetails = (props: IProps) => {\r\n  let { id } = useParams();\r\n  const [member, setMember] = useState<null | IMember>(null);\r\n  const [orgID] = useUserOrganisation();\r\n\r\n  useEffect(() => {\r\n    const getAMember = async () => {\r\n      const result = await memberService.getByID(id);\r\n      if (result?.data) {\r\n        setMember(result.data);\r\n      }\r\n    };\r\n\r\n    getAMember();\r\n  }, [id]);\r\n\r\n  if (!member) {\r\n    return <>loading...</>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>{member.user?.email}</h1>\r\n      <MemberForm organisationID={orgID} member={member} />\r\n    </>\r\n  );\r\n};\r\n","import React, { } from 'react';\r\nimport { MemberForm } from '../../organisms/MemberForm';\r\nimport { useUserOrganisation } from '../../../hooks/useUserOrganisation';\r\n\r\ninterface IProps {}\r\n\r\nexport const MemberAdd = (props: IProps) => {\r\n  const [orgID] = useUserOrganisation();\r\n\r\n  return <>\r\n    <MemberForm organisationID={orgID} />\r\n  </>;\r\n};\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect, useRouteMatch } from 'react-router-dom';\r\n\r\n// ------------------------------------------ COMPONENTS IMPORT\r\nimport { Member } from '../components/pages/Member/Member';\r\nimport { MemberDetails } from '../components/pages/Member/MemberDetails';\r\nimport { MemberAdd } from '../components/pages/Member/MemberAdd';\r\n\r\n\r\nexport const MemberRoutes = () => {\r\n  const { path } = useRouteMatch();\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={`${path}`} exact>\r\n        <Member />\r\n      </Route>\r\n\r\n      <Route path={`${path}/add`}>\r\n        <MemberAdd />\r\n      </Route>\r\n\r\n      <Route path={`${path}/:id`}>\r\n        <MemberDetails />\r\n      </Route>\r\n\r\n      <Redirect to={`${path}`} />\r\n    </Switch>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IClub } from '../../../libs/interfaces/club.interface';\r\nimport { clubService } from '../../../services/club.service';\r\n\r\nexport const Club = () => {\r\n  const [clubs, setClubs] = useState<IClub[]>([]);\r\n\r\n  useEffect(() => {\r\n    const getAllClubs = async () => {\r\n      const clubs = await clubService.getAll();\r\n      if (clubs) {\r\n        setClubs(clubs.data);\r\n      }\r\n    };\r\n\r\n    getAllClubs();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <h1>Clubs</h1>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <Link to=\"/admin/clubs/add\" className=\"btn btn-primary\">\r\n            Ajouter\r\n          </Link>\r\n        </div>\r\n        <div className=\"row\">\r\n          <table className=\"table\">\r\n            <tbody>\r\n              {clubs.map((club) => (\r\n                <ClubRow club={club} key={club.id} />\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst ClubRow = (props: { club: IClub }) => {\r\n  const { club } = props;\r\n\r\n  return (\r\n    <tr>\r\n      <td>{club.id}</td>\r\n      <td>{club.name}</td>\r\n      <td>\r\n        <Link to={`/admin/clubs/${club.id}`}>...</Link>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n","import React, { ReactNode } from 'react';\r\n\r\n\r\ninterface IProps {\r\n  type?: 'submit' | 'button';\r\n  variant?: 'primary' | 'secondary';\r\n  className?: string;\r\n  id?: string;\r\n  disabled?: boolean;\r\n  children: ReactNode;\r\n}\r\n\r\nexport const Button = (props: IProps) => {\r\n  const { type, variant, className, id, disabled } = props;\r\n\r\n  return (\r\n    <button\r\n      type={type ? type : 'button'}\r\n      id={id}\r\n      className={`btn ${variant ? `btn-${variant}` : ''} ${className}`}\r\n      disabled={disabled}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n","import React, { ReactNode } from 'react';\r\n\r\ninterface IProps {\r\n  variant?: 'primary' | 'secondary' | 'success' | 'danger';\r\n  className?: string;\r\n  id?: string;\r\n  children: ReactNode;\r\n}\r\n\r\nexport const Alert = (props: IProps) => {\r\n  const { variant, className, id } = props;\r\n\r\n  return (\r\n    <div\r\n      id={id}\r\n      className={`alert ${variant ? `alert-${variant}` : ''} ${className}`}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form, Field, ErrorMessage, FormikHelpers } from 'formik';\r\nimport { Button } from '../atoms/Button';\r\nimport { Alert } from '../atoms/Alert';\r\nimport { clubService } from '../../services/club.service';\r\nimport { IClub } from '../../libs/interfaces/club.interface';\r\n\r\ninterface IFormValue {\r\n  global: string;\r\n  name: string;\r\n}\r\n\r\ninterface IProps {\r\n  club?: IClub;\r\n  organisationID: number;\r\n  onSubmit: ()=>void;\r\n}\r\n\r\nexport const ClubForm = (props: IProps) => {\r\n  const initialValues: IFormValue = props.club\r\n    ? {\r\n        name: props.club.name,\r\n        global: '',\r\n      }\r\n    : { name: '', global: '' };\r\n\r\n  const validate = (values: IFormValue) => {\r\n    const errors: any = {};\r\n\r\n    if (!values.name) {\r\n      errors.name = 'Required';\r\n    }\r\n\r\n    return errors;\r\n  };\r\n\r\n  const submit = async (\r\n    values: IFormValue,\r\n    formHelper: FormikHelpers<IFormValue>\r\n  ) => {\r\n    const { setSubmitting, setFieldError } = formHelper;\r\n\r\n    try {\r\n      if (props.club?.id) {\r\n        await clubService.update(props.club.id, values);\r\n      } else {\r\n        await clubService.add({\r\n          ...values,\r\n          organisation: { id: props.organisationID },\r\n        });\r\n      }\r\n\r\n      props.onSubmit();\r\n    } catch (err) {\r\n      console.error(err);\r\n      if (err.message) {\r\n        setFieldError('global', err.message);\r\n      } else {\r\n        setFieldError('global', 'Erreur serveur...');\r\n      }\r\n    }\r\n\r\n    setSubmitting(false);\r\n  };\r\n\r\n  return (\r\n    <Formik initialValues={initialValues} validate={validate} onSubmit={submit}>\r\n      {({ isSubmitting, errors }) => (\r\n        <Form>\r\n          <ErrorMessage\r\n            name=\"global\"\r\n            component={(props) => (\r\n              <Alert variant=\"danger\">{props.children}</Alert>\r\n            )}\r\n          />\r\n\r\n          <div className={`form-group`}>\r\n            <label>Nom</label>\r\n            <Field\r\n              className={`form-control ${errors.name ? 'is-invalid' : ''}`}\r\n              name=\"name\"\r\n            />\r\n            <ErrorMessage\r\n              name=\"name\"\r\n              component=\"div\"\r\n              className=\"invalid-feedback\"\r\n            />\r\n          </div>\r\n\r\n          <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\r\n            Sauver\r\n          </Button>\r\n          <Link to=\"/admin/clubs\">\r\n            <Button variant=\"secondary\">Annuler</Button>\r\n          </Link>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { ClubForm } from '../../organisms/ClubForm';\r\nimport { getUserInfo } from '../../../services/auth.service';\r\n\r\ninterface IProps {}\r\n\r\nexport const ClubAdd = (props: IProps) => {\r\n  const [orgID, setOrgID] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const userInfo = getUserInfo();\r\n    if (userInfo?.organisation?.id) {\r\n      setOrgID(userInfo?.organisation.id);\r\n    }\r\n  }, []);\r\n\r\n  const onSubmit = ()=>{\r\n    window.history.back();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ClubForm organisationID={orgID} onSubmit={onSubmit}/>\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { IClub } from '../../../libs/interfaces/club.interface';\r\nimport { clubService } from '../../../services/club.service';\r\nimport { ClubForm } from '../../organisms/ClubForm';\r\nimport { getUserInfo } from '../../../services/auth.service';\r\n\r\ninterface IProps {}\r\n\r\nexport const ClubDetails = (props: IProps) => {\r\n  const [orgID, setOrgID] = useState(0);\r\n  let { id } = useParams();\r\n  const [club, setClub] = useState<null | IClub>(null);\r\n\r\n  useEffect(() => {\r\n    const userInfo = getUserInfo();\r\n    if (userInfo?.organisation?.id) {\r\n      setOrgID(userInfo?.organisation.id);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getAClub = async () => {\r\n      const result = await clubService.getByID(id);\r\n      if (result?.data) {\r\n        setClub(result.data);\r\n      }\r\n    };\r\n\r\n    getAClub();\r\n  }, [id]);\r\n\r\n  const onSubmit= ()=>{}\r\n\r\n  if (!club) {\r\n    return <>loading...</>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ClubForm club={club} organisationID={orgID} onSubmit={onSubmit}/>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect, useRouteMatch } from 'react-router-dom';\r\n\r\n// ------------------------------------------ COMPONENTS IMPORT\r\nimport { Club } from '../components/pages/Club/Club';\r\nimport { ClubAdd } from '../components/pages/Club/ClubAdd';\r\nimport { ClubDetails } from '../components/pages/Club/ClubDetails';\r\n\r\nexport const ClubRoutes = () => {\r\n  const { path } = useRouteMatch();\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={`${path}`} exact>\r\n        <Club />\r\n      </Route>\r\n\r\n      <Route path={`${path}/add`}>\r\n        <ClubAdd />\r\n      </Route>\r\n\r\n      <Route path={`${path}/:id`}>\r\n        <ClubDetails />\r\n      </Route>\r\n\r\n      <Redirect to={`${path}`} />\r\n    </Switch>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useGetAllFromService } from '../../../hooks/useGetAllFromService';\r\nimport { IMembershipPlan } from '../../../libs/interfaces/membershipPlan.interface';\r\nimport { getPlanName } from '../../../services/data-mapping.service';\r\nimport { membershipPlanService } from '../../../services/membership-plan.service';\r\nimport { DataTable } from '../../molecules/DataTable';\r\n\r\nexport const MembershipPlan = () => {\r\n  const [plans, getAllMembershipPlans] = useGetAllFromService<IMembershipPlan>({\r\n    service: membershipPlanService,\r\n  });\r\n\r\n  const DATA = plans.map((plan) => ({\r\n    ...plan,\r\n    tacit: plan.tacit ? 'oui' : 'non',\r\n    type: getPlanName(plan.type),\r\n  }));\r\n\r\n  const COLUMNS = [\r\n    {\r\n      Header: 'Prix',\r\n      accessor: 'price',\r\n    },\r\n    {\r\n      Header: 'Description',\r\n      accessor: 'description',\r\n    },\r\n    {\r\n      Header: 'Type',\r\n      accessor: 'type',\r\n    },\r\n    {\r\n      Header: 'Tacite',\r\n      accessor: 'tacit',\r\n    },\r\n    {\r\n      Header: 'Action',\r\n      accessor: 'id',\r\n      disableFilters: true,\r\n      disableSortBy: true,\r\n      Cell: (cell: any) => (\r\n        <MembershipPlanAction\r\n          plan={cell.row.values}\r\n          refreshList={getAllMembershipPlans}\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <h1>Gestion des abonnements</h1>\r\n      <div className=\"row\">\r\n        <Link to=\"/admin/membershipPlans/add\" className=\"btn btn-primary\">\r\n          Ajouter\r\n        </Link>\r\n        <DataTable data={DATA} columns={COLUMNS} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst MembershipPlanAction = ({ plan, refreshList }: any) => {\r\n  const deletePlan = async (plan: IMembershipPlan) => {\r\n    if (!plan) return;\r\n    const deleteResult = await membershipPlanService.delete(plan.id);\r\n    if (deleteResult) refreshList();\r\n  };\r\n\r\n  return (\r\n    <tr>\r\n      <td>{plan.price}</td>\r\n      <td>{getPlanName(plan.type)}</td>\r\n      <td>{plan.tacit ? 'oui' : 'non'}</td>\r\n      <td>\r\n        <Link\r\n          to={`/admin/membershipPlans/update/${plan.id}`}\r\n          className=\"btn btn-primary\"\r\n        >\r\n          Modifier\r\n        </Link>\r\n        <button className=\"btn\" onClick={(e) => deletePlan(plan)}>\r\n          Supprimer\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Formik, Form, Field, FormikHelpers } from 'formik';\r\nimport { Button } from '../atoms/Button';\r\nimport { IMembershipPlan } from '../../libs/interfaces/membershipPlan.interface';\r\nimport { membershipPlanService } from '../../services/membership-plan.service';\r\nimport { useGetAllFromService } from '../../hooks/useGetAllFromService';\r\n\r\ninterface IFormValue {\r\n  price?: number;\r\n  description?: string;\r\n  type?: number;\r\n  tacit?: boolean;\r\n  organisation?: {};\r\n}\r\n\r\ninterface IProps {\r\n  membershipPlan?: IMembershipPlan;\r\n  organisationID: number;\r\n  clubID?: number;\r\n}\r\n\r\nexport const MembershipPlanForm = (props: IProps) => {\r\n  const initialValues: IFormValue = props.membershipPlan\r\n    ? { ...props.membershipPlan }\r\n    : { price: 0, description: '', type: 1, tacit: false };\r\n  const [typeList, setTypeList] = useState([]);\r\n  const [typeSelectedId, setTypeSelectedId] = useState(0);\r\n  const [tacitSelected, setTacitSelected] = useState(false);\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    const fetchTypes = async () => {\r\n      const types = await membershipPlanService.getAllTypes()\r\n      setTypeList(types?.data)\r\n    }\r\n    fetchTypes();\r\n  }, []);\r\n  \r\n  const validate = (values: IFormValue) => {\r\n    const errors: any = {};\r\n    if (!values.price) errors.price = 'Required';\r\n    return errors;\r\n  };\r\n\r\n  const submit = async (\r\n    values: IFormValue,\r\n    formHelper: FormikHelpers<IFormValue>\r\n  ) => {\r\n    const { setSubmitting, setFieldError } = formHelper;\r\n    values.type = typeSelectedId;\r\n    values.tacit = tacitSelected;\r\n    try {\r\n      if (props.membershipPlan?.id) {\r\n        await membershipPlanService.update(props.membershipPlan.id, values);\r\n      } else {\r\n        values.organisation = { id: props.organisationID };\r\n        await membershipPlanService.add({\r\n          ...values,\r\n        });\r\n      }\r\n      history.push('/admin/membershipPlans')\r\n    } catch (err) {\r\n      console.error(err);\r\n      if (err.message) {\r\n        setFieldError('global', err.message);\r\n      } else {\r\n        setFieldError('global', 'Erreur serveur...');\r\n      }\r\n      setSubmitting(false);\r\n    }\r\n    \r\n  };\r\n  const changeTypeSelected = (id: number) => {\r\n    setTypeSelectedId(id);\r\n  };\r\n\r\n  const changeTacit = (tacit: string) => {\r\n    setTacitSelected(tacit === 'true');\r\n  };\r\n\r\n  return (\r\n    <div id=\"membershipPlanForm\">\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validate={validate}\r\n        onSubmit={submit}\r\n      >\r\n        {({ isSubmitting, errors }) => (\r\n          <Form>\r\n            <label htmlFor=\"price\">Prix</label>\r\n            <Field\r\n              className={`form-control ${errors.price ? 'is-invalid' : ''}`}\r\n              name=\"price\"\r\n              type=\"number\"\r\n            />\r\n            <label htmlFor=\"type\">Type</label>\r\n            <Field\r\n              as=\"select\"\r\n              name=\"membershipSelect\"\r\n              class=\"form-control\"\r\n              onChange={(event: { target: any }) => {\r\n                changeTypeSelected(event.target.value);\r\n              }}\r\n            >\r\n              {typeList.map((type, index) => (\r\n                <option key={index} value={index}>\r\n                  {`${type}`}\r\n                </option>\r\n              ))}\r\n            </Field>\r\n            <label htmlFor=\"tacit\">Tacite</label>\r\n            <Field\r\n              as=\"select\"\r\n              name=\"tacitSelect\"\r\n              class=\"form-control\"\r\n              onChange={(event: { target: any }) => {\r\n                changeTacit(event.target.value);\r\n              }}\r\n            >\r\n              <option value=\"true\">oui</option>\r\n              <option value=\"false\">non</option>\r\n            </Field>\r\n            <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\r\n              Sauver\r\n            </Button>\r\n            <Link to=\"/admin/membershipPlans\">\r\n              <Button variant=\"secondary\">Annuler</Button>\r\n            </Link>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { MembershipPlanForm } from '../../organisms/MembershipPlanForm';\r\nimport { getUserInfo } from '../../../services/auth.service';\r\nimport { IMembershipPlan } from '../../../libs/interfaces/membershipPlan.interface';\r\nimport { useParams } from 'react-router-dom';\r\nimport { membershipPlanService } from '../../../services/membership-plan.service';\r\n\r\ninterface IProps {\r\n  membershipPlanId?: number;\r\n}\r\n\r\nexport const MembershipPlanAdd = (props: IProps) => {\r\n  const [orgID, setOrgID] = useState(0);\r\n  const [planToUpdate, setPlanToUpdate] = useState<IMembershipPlan>();\r\n  const { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    const userInfo = getUserInfo();\r\n    if (userInfo?.organisation?.id) setOrgID(userInfo?.organisation.id);\r\n    const fetchData = async () => {\r\n      const membershipPlan = await membershipPlanService.getByID(id);\r\n      if (membershipPlan) setPlanToUpdate(membershipPlan.data);\r\n    };\r\n    if (id) fetchData();\r\n  }, [id]);\r\n\r\n  return (\r\n    <>\r\n      <h1>Ajout d'abonnement</h1>\r\n      <div>\r\n        {id ? (\r\n          planToUpdate ? (\r\n            <MembershipPlanForm\r\n              organisationID={orgID}\r\n              membershipPlan={planToUpdate}\r\n            />\r\n          ) : null\r\n        ) : (\r\n          <MembershipPlanForm organisationID={orgID} />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect, useRouteMatch } from 'react-router-dom';\r\nimport { MembershipPlan } from '../components/pages/MembershipPlan/MembershipPlan';\r\nimport { MembershipPlanAdd } from '../components/pages/MembershipPlan/MembershipPlanAdd';\r\n\r\nexport const MembershipPlanRoute = () => {\r\n  const { path } = useRouteMatch();\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={`${path}`} exact>\r\n        <MembershipPlan />\r\n      </Route>\r\n\r\n      <Route path={`${path}/add`}>\r\n        <MembershipPlanAdd />\r\n      </Route>\r\n\r\n      <Route path={`${path}/update/:id`}>\r\n        <MembershipPlanAdd />\r\n      </Route>\r\n\r\n      <Redirect to={`${path}`} />\r\n    </Switch>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IMemberLabel } from '../../../libs/interfaces/memberLabel.interface';\r\nimport { memberLabelService } from '../../../services/memberlabel.service';\r\n\r\nexport const MemberLabel = () => {\r\n  const [memberLabels, setMemberLabels] = useState<IMemberLabel[]>([]);\r\n\r\n  useEffect(() => {\r\n    const getAllMemberLabel = async () => {\r\n      const memberLabels = await memberLabelService.getAll();\r\n      if (memberLabels) {\r\n        setMemberLabels(memberLabels.data);\r\n      }\r\n    };\r\n\r\n    getAllMemberLabel();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <h1>Tag de membre</h1>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <Link to=\"/admin/memberlabels/add\" className=\"btn btn-primary\">\r\n            Ajouter\r\n          </Link>\r\n        </div>\r\n        <div className=\"row\">\r\n          <table className=\"table\">\r\n            <tbody>\r\n              {memberLabels.map((label) => (\r\n                <LabelRow label={label} key={label.id} />\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst LabelRow = (props: { label: IMemberLabel }) => {\r\n  const { label } = props;\r\n\r\n  return (\r\n    <tr>\r\n      <td>{label.id}</td>\r\n      <td>{label.name}</td>\r\n      <td>\r\n        <Link to={`/admin/memberlabels/${label.id}`}>...</Link>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n","import { ErrorMessage, Form, Formik, FormikHelpers } from 'formik';\r\nimport React from 'react';\r\nimport { Alert, Button } from \"react-bootstrap\";\r\nimport { Link } from 'react-router-dom';\r\nimport { IMemberLabel } from \"../../libs/interfaces/memberLabel.interface\";\r\nimport { memberLabelService } from '../../services/memberlabel.service';\r\nimport { FormGroup } from \"../molecules/FormGroup\";\r\n\r\ninterface IFormValue {\r\n  global: string;\r\n  name: string;\r\n}\r\n\r\ninterface IProps {  \r\n  label?: IMemberLabel;\r\n  organisationID: number;\r\n  onSubmit: ()=>void;\r\n}\r\n\r\nexport const MemberLabelForm = (props: IProps) => {\r\n  let initialValues: IFormValue = { name: '', global: '' };\r\n\r\n  if(props.label) {\r\n    initialValues = { ...initialValues, ...props.label};\r\n  }\r\n\r\nconst validate = (values: IFormValue) => {\r\n  const errors: any = {};\r\n\r\n  if (!values.name) {\r\n    errors.name = 'Required';\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nconst submit = async (\r\n  values: IFormValue,\r\n  formHelper: FormikHelpers<IFormValue>\r\n) => {\r\n  const { setSubmitting, setFieldError } = formHelper;\r\n\r\n  try {\r\n    if (props.label?.id) {\r\n      await memberLabelService.update(props.label.id, values);\r\n    } else {\r\n      await memberLabelService.add({\r\n        ...values,\r\n        organisation: { id: props.organisationID },\r\n      });\r\n    }\r\n\r\n    props.onSubmit();\r\n  } catch (err) {\r\n    console.error(err);\r\n    if (err.message) {\r\n      setFieldError('global', err.message);\r\n    } else {\r\n      setFieldError('global', 'Erreur serveur...');\r\n    }\r\n  }\r\n\r\n  setSubmitting(false);\r\n};\r\n\r\nreturn (\r\n  <Formik initialValues={initialValues} validate={validate} onSubmit={submit}>\r\n    {({ isSubmitting, errors }) => (\r\n      <Form>\r\n        <ErrorMessage\r\n          name=\"global\"\r\n          component={(props) => (\r\n            <Alert variant=\"danger\">{props.children}</Alert>\r\n          )}\r\n        />\r\n\r\n        <FormGroup\r\n          formnikError={errors.name}\r\n          label=\"Nom du tag\"\r\n          name=\"name\"\r\n          type=\"text\"\r\n        />\r\n\r\n        <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting}>\r\n          Sauver\r\n        </Button>\r\n        <Link to=\"/admin/memberlabels\">\r\n          <Button variant=\"secondary\">Annuler</Button>\r\n        </Link>\r\n      </Form>\r\n    )}\r\n  </Formik>\r\n);\r\n}","import React from 'react';\r\nimport { useUserOrganisation } from '../../../hooks/useUserOrganisation';\r\nimport { MemberLabelForm } from '../../organisms/MemberLabelForm';\r\n\r\ninterface IProps {}\r\n\r\nexport const MemberLabelAdd = (props: IProps) => {\r\n  const [orgID] = useUserOrganisation();\r\n\r\n  const onSubmit = ()=>{\r\n    window.history.back();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MemberLabelForm organisationID={orgID} onSubmit={onSubmit}/>\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useUserOrganisation } from '../../../hooks/useUserOrganisation';\r\nimport { IMemberLabel } from '../../../libs/interfaces/memberLabel.interface';\r\nimport { memberLabelService } from '../../../services/memberlabel.service';\r\nimport { MemberLabelForm } from '../../organisms/MemberLabelForm';\r\n\r\ninterface IProps {}\r\n\r\nexport const MemberLabelDetails = (props: IProps) => {\r\n  const [orgID] = useUserOrganisation();\r\n  let { id } = useParams();\r\n  const [label, setLabel] = useState<null | IMemberLabel>(null);\r\n\r\n  useEffect(() => {\r\n    const getAClub = async () => {\r\n      const result = await memberLabelService.getByID(id);\r\n      if (result?.data) {\r\n        setLabel(result.data);\r\n      }\r\n    };\r\n\r\n    getAClub();\r\n  }, [id]);\r\n\r\n  const onSubmit = ()=>{\r\n    window.history.back();\r\n  }\r\n\r\n  if(!label){\r\n    return <>loading....</>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MemberLabelForm label={label} organisationID={orgID} onSubmit={onSubmit}/>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect, useRouteMatch } from 'react-router-dom';\r\n\r\n// ------------------------------------------ COMPONENTS IMPORT\r\nimport { MemberLabel } from '../components/pages/MemberLabel/MemberLabel';\r\nimport { MemberLabelAdd } from '../components/pages/MemberLabel/MemberLabelAdd';\r\nimport { MemberLabelDetails } from '../components/pages/MemberLabel/MemberLabelDetails';\r\n// import { MemberDetails } from '../components/pages/Member/MemberDetails';\r\n\r\n\r\n\r\nexport const MemberLabelRoutes = () => {\r\n  const { path } = useRouteMatch();\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={`${path}`} exact>\r\n        <MemberLabel />\r\n      </Route>\r\n\r\n      <Route path={`${path}/add`}>\r\n        <MemberLabelAdd />\r\n      </Route>\r\n\r\n      <Route path={`${path}/:id`}>\r\n        <MemberLabelDetails />\r\n      </Route>\r\n\r\n      <Redirect to={`${path}`} />\r\n    </Switch>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './DashboardCard.scss';\r\n\r\ninterface IProps {\r\n  value: string;\r\n  children: any;\r\n  description: string;\r\n}\r\n\r\nexport const DashboardCard = (props: IProps) => {\r\n  const { value, children, description } = props;\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-body\">\r\n        <p className=\"card-text\">{description}</p>\r\n        <h5 className=\"card-title\">{value}</h5>\r\n        <div>{children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}; \r\n","import { APIResource } from './api.service';\r\n\r\nclass APIDashboard extends APIResource{\r\n  constructor(){\r\n    super('dashboard');\r\n  }\r\n}\r\n\r\nexport const dashboardService = new APIDashboard();","import React, { useEffect, useState } from 'react';\r\nimport { DashboardCard } from '../../molecules/DashboardCard';\r\nimport { dashboardService } from '../../../services/dashboard.service';\r\nimport { IDashboardStats } from '../../../libs/interfaces/dashboard.interface';\r\nimport { Link } from 'react-router-dom';\r\nimport { IMember } from '../../../libs/interfaces/member.interface';\r\n\r\nexport const Dashboard = () => {\r\n  const [stats, setStats] = useState<IDashboardStats | null>(null);\r\n\r\n  useEffect(() => {\r\n    const request = async () => {\r\n      const result = await dashboardService.getAll();\r\n      if (result) {\r\n        setStats(result.data);\r\n      }\r\n    };\r\n\r\n    request();\r\n  }, []);\r\n\r\n  if (!stats) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Tableau de bord</h1>\r\n      <div className=\"card-deck\">\r\n        <DashboardCard\r\n          value={\"\"+ stats.birthdays.length}\r\n          description={\"Membres ayant leur anniversaire dans 7 jours\"}\r\n        >\r\n          <ul className=\"list-group\">\r\n            {stats.birthdays.map((member: IMember) => (\r\n              <li className=\"list-group-item\">\r\n                <Link to={`/admin/members/${member.id}`}>\r\n                  {member.user?.firstname} {member.user?.lastname}\r\n                </Link>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </DashboardCard>\r\n\r\n        <DashboardCard\r\n          value={\"\" + stats.negativeBalanceUsers.length}\r\n          description={\"Membres ayant leur anniversaire dans 7 jours\"}\r\n        >\r\n          <ul className=\"list-group\">\r\n            {stats.negativeBalanceUsers.map((member: IMember) => (\r\n              <li className=\"list-group-item\">\r\n                <Link to={`/admin/members/${member.id}`}>\r\n                  {member.user?.firstname} {member.user?.lastname}\r\n                </Link>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </DashboardCard>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { APIResource, GET } from './api.service';\r\nclass APIMembership extends APIResource {\r\n  constructor() {\r\n    super('memberships');\r\n  }\r\n  getNotPaid() {\r\n    return GET('memberships/notPaid');\r\n  }\r\n}\r\n\r\nexport const membershipService = new APIMembership();\r\n","import { IMembership } from '../libs/interfaces/membership.interface';\r\nimport { IPayment } from '../libs/interfaces/payment.interface';\r\nimport { APIResource, POST } from './api.service';\r\n\r\nclass APIPayments extends APIResource {\r\n  constructor() {\r\n    super('payments');\r\n  }\r\n  createPaymentWithoutRequest(body: {\r\n    payment: IPayment;\r\n    memberShip: IMembership;\r\n  }) {\r\n    return POST('payments/payment-without-request', body);\r\n  }\r\n}\r\n\r\nexport const paymentService = new APIPayments();\r\n","import { APIResource } from './api.service';\r\n\r\nexport const paymentRequestService = new APIResource('payment-requests');\r\n","import React, { useEffect, useState } from 'react';\r\nimport { IMembership } from '../../libs/interfaces/membership.interface';\r\nimport { IPayment } from '../../libs/interfaces/payment.interface';\r\nimport { getPlanName } from '../../services/data-mapping.service';\r\nimport { membershipService } from '../../services/membership.service';\r\nimport { paymentService } from '../../services/payment.service';\r\nimport { paymentRequestService } from '../../services/paymentRequest.service';\r\n\r\ninterface IProps {\r\n  memberShip: IMembership;\r\n  onPaymentReceivedFunction: CallableFunction;\r\n}\r\n\r\nexport const PaymentCard = (props: IProps) => {\r\n  const { memberShip, onPaymentReceivedFunction } = props;\r\n  const [alreadyRequested, setAlreadyRequested] = useState<boolean>(false);\r\n  useEffect(() => {\r\n    if (memberShip.paymentRequest) setAlreadyRequested(true);\r\n  }, [memberShip.paymentRequest]);\r\n  const createPaymentRequest = async (\r\n    membership: IMembership\r\n  ): Promise<void> => {\r\n    if (!membership.plan) return; // TODO: how to correctly check non nullity of some fields more globally ?\r\n    try {\r\n      const newPaymentRequest = await paymentRequestService.add({\r\n        amount: membership.plan.price,\r\n        date: new Date(),\r\n        description: 'demandé manuellement',\r\n      });\r\n      await membershipService.update(membership.id, {\r\n        paymentRequest: newPaymentRequest?.data,\r\n      });\r\n      setAlreadyRequested(true);\r\n    } catch (e) {\r\n      console.error('error on createPaymentRequest()', e);\r\n    }\r\n  };\r\n  const createPayment = async (memberShip: IMembership): Promise<void> => {\r\n    if (!memberShip.plan) return;\r\n    let paymentData: IPayment = {\r\n      amount: memberShip.plan.price,\r\n      date: new Date(),\r\n      hasBeenCanceled: false,\r\n    };\r\n\r\n    try {\r\n      let newPayment;\r\n      if (alreadyRequested) {\r\n        paymentData.paymentRequest = memberShip.paymentRequest;\r\n        paymentData.member = memberShip.member;\r\n        newPayment = await paymentService.add(paymentData);\r\n      } else {\r\n        newPayment = await paymentService.createPaymentWithoutRequest({\r\n          payment: paymentData,\r\n          memberShip,\r\n        });\r\n      }\r\n      if(newPayment) {\r\n        onPaymentReceivedFunction()\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-header\">\r\n        {memberShip.member?.user?.firstname} {memberShip.member?.user?.lastname}\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">\r\n          Abonnement {getPlanName(memberShip.plan?.type)}, échu le{' '}\r\n          {memberShip.endDate}\r\n        </h5>\r\n        prix : {memberShip.plan?.price}.-\r\n        <div className=\"float-right\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={async () => createPaymentRequest(memberShip)}\r\n            disabled={alreadyRequested}\r\n          >\r\n            Paiment demandé\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-success\"\r\n            onClick={async () => createPayment(memberShip)}\r\n          >\r\n            Argent reçu\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { IMembership } from '../../../libs/interfaces/membership.interface';\r\nimport {} from '../../../services/member.service';\r\nimport { membershipService } from '../../../services/membership.service';\r\nimport { PaymentCard } from '../../molecules/paymentCard';\r\n\r\nexport const Payment = () => {\r\n  const [memberships, setMemberships] = useState<IMembership[]>([]);\r\n\r\n  const getNotPaidMemberships = async (): Promise<void> => {\r\n    const memberships = await membershipService.getNotPaid();\r\n    setMemberships(memberships?.data);\r\n  };\r\n  useEffect(() => {\r\n    getNotPaidMemberships();\r\n  }, []);\r\n  const paymentReceived = async () => {\r\n    await getNotPaidMemberships();\r\n  };\r\n  return (\r\n    <div>\r\n      <h1>Gestion de paiements</h1>\r\n      {memberships.map((membership) => (\r\n        <PaymentCard\r\n          key={membership.id}\r\n          memberShip={membership}\r\n          onPaymentReceivedFunction={() => {\r\n            paymentReceived();\r\n          }}\r\n        ></PaymentCard>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect, useRouteMatch } from 'react-router-dom';\r\nimport { Payment } from '../components/pages/Payment/Payment';\r\n\r\nexport const PaymentRoute = () => {\r\n  const { path } = useRouteMatch();\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={`${path}`} exact>\r\n        <Payment />\r\n      </Route>\r\n\r\n      <Redirect to={`${path}`} />\r\n    </Switch>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Switch, Route, useRouteMatch } from 'react-router-dom';\r\nimport { MemberRoutes } from './member.routes';\r\nimport { ClubRoutes } from './club.routes';\r\nimport { MembershipPlanRoute } from './membershipPlan.routes';\r\nimport { MemberLabelRoutes } from './memberLabel.routes';\r\n\r\n// ------------------------------------------ COMPONENTS IMPORT\r\nimport { Dashboard } from '../components/pages/Dashboard/Dashboard';\r\nimport { PaymentRoute } from './payment.routes';\r\n\r\nexport const AdminRoutes = () => {\r\n  const { path } = useRouteMatch();\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={`${path}/`} exact>\r\n        <Dashboard />\r\n      </Route>\r\n\r\n      <Route path={`${path}/members`}>\r\n        <MemberRoutes />\r\n      </Route>\r\n\r\n      <Route path={`${path}/clubs`}>\r\n        <ClubRoutes />\r\n      </Route>\r\n\r\n      <Route path={`${path}/dashboard`}>\r\n        <Dashboard />\r\n      </Route>\r\n\r\n      <Route path={`${path}/membershipPlans`}>\r\n        <MembershipPlanRoute />\r\n      </Route>\r\n\r\n      <Route path={`${path}/payments`}>\r\n        <PaymentRoute />\r\n      </Route>\r\n\r\n      <Route path={`${path}/memberlabels`}>\r\n        <MemberLabelRoutes />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport LogoImg from '../../assets/logo/clug-logo-w.svg';\r\n\r\ninterface IProps {\r\n    className?: string;\r\n  }\r\n\r\nexport const Logo = (props: IProps) => {\r\n  const { className } = props;\r\n  return (\r\n    <>\r\n        <img  \r\n            className={`logo ${className}`}\r\n            src={LogoImg} \r\n            alt=\"Clug logo\"/>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Nav } from 'react-bootstrap';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { useMediaQuery } from 'react-responsive';\r\nimport { Logo } from '../atoms/Logo';\r\nimport LogoutIcon from '../../assets/logout.svg';\r\nimport './AdminLayout.scss';\r\n\r\ninterface IProps {\r\n  children: any;\r\n}\r\n\r\nexport const AdminLayout = (props: IProps) => {\r\n  const isDesktopOrLaptop = useMediaQuery({\r\n    query: '(min-device-width: 992px)',\r\n  });\r\n\r\n  const [isMenuOpen, setIsMenuOpen] = useState(isDesktopOrLaptop);\r\n\r\n  const adminLinks = [\r\n    {\r\n      displayName: 'Tableau de bord',\r\n      to: '/admin/dashboard',\r\n    },\r\n    {\r\n      displayName: 'Membres',\r\n      to: '/admin/members',\r\n    },\r\n    {\r\n      displayName: 'Clubs',\r\n      to: '/admin/clubs',\r\n    },\r\n    {\r\n      displayName: 'Abonnements',\r\n      to: '/admin/membershipPlans',\r\n    },\r\n    {\r\n      displayName: 'Paiements',\r\n      to: '/admin/payments',\r\n    },\r\n    {\r\n      displayName: 'Tag de membre',\r\n      to: '/admin/memberlabels',\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div id=\"adminlayout\">\r\n      <div className=\"navbar bg-primary d-flex justify-content-between fixed-top\">\r\n        <button\r\n          onClick={() => {\r\n            setIsMenuOpen(!isMenuOpen);\r\n          }}\r\n          className={`navbar-toggler col-1 ${isMenuOpen ? 'open' : ''}`}\r\n        >\r\n          <div className=\"burger\"><span></span><span></span><span></span><span></span></div>\r\n        </button>\r\n\r\n        <Link\r\n          to=\"/admin/dashboard\"\r\n        >\r\n          <Logo\r\n            className=\"header\"\r\n          />\r\n        </Link>\r\n\r\n        <ul className=\"navbar-nav col-1 text-right\">\r\n          <li className=\"nav-item text-nowrap\">\r\n            <Link className=\"nav-link\" to=\"/logout\">\r\n              <img\r\n                className=\"logout icon\"\r\n                src={LogoutIcon}\r\n                alt=\"logout\"\r\n              />\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div id=\"main\">\r\n        <Nav\r\n          className={`flex-column sidenav ${isMenuOpen ? 'open' : ''}`}\r\n          id=\"sidenav\"\r\n        >\r\n          {adminLinks.map((link, index) => (\r\n            <NavLink\r\n              key={index}\r\n              to={link.to}\r\n              activeStyle={{\r\n                fontWeight: \"bold\",\r\n                color: \"var(--c-primary)\"\r\n              }}\r\n              onClick={() => {\r\n                if (!isDesktopOrLaptop) {\r\n                  setIsMenuOpen(!isMenuOpen);\r\n                }\r\n              }}\r\n            >\r\n              {link.displayName}\r\n            </NavLink>\r\n          ))}\r\n        </Nav>\r\n\r\n        <div className=\"container\" id=\"mainContent\">\r\n          {props.children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport './BasicLayout.scss';\r\n\r\ninterface IProps {\r\n  children: any;\r\n}\r\n\r\nexport const BasicLayout = (props: IProps) => {\r\n  return (\r\n    <div id=\"basiclayout\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col main\">{props.children}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { forwardRef } from 'react';\r\n\r\ninterface IProps extends React.InputHTMLAttributes<HTMLInputElement> {}\r\n\r\nexport const Input = forwardRef<HTMLInputElement, IProps>(\r\n  (props: IProps, ref) => {\r\n    const { id, className, type, placeholder } = props;\r\n\r\n    return (\r\n      <input\r\n        ref={ref}\r\n        id={id}\r\n        className={`form-control ${className}`}\r\n        type={type ? `${type}` : 'text'}\r\n        placeholder={placeholder}\r\n      />\r\n    );\r\n  }\r\n);\r\n","import React, { useRef, FormEvent, useContext, useState } from 'react';\r\nimport { login } from '../../services/auth.service';\r\nimport {\r\n  GlobalContext,\r\n  GlobalContextActions,\r\n} from '../../contexts/GlobalContext';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Input } from '../atoms/Input';\r\nimport { Button } from '../atoms/Button';\r\nimport { Alert } from '../atoms/Alert';\r\nimport './forms.scss';\r\n\r\nexport const LoginForm = () => {\r\n  const [error, setError] = useState<null | { message: string }>(null);\r\n\r\n  const usernameInp = useRef<HTMLInputElement>(null);\r\n  const passwordInp = useRef<HTMLInputElement>(null);\r\n\r\n  const globalContext = useContext(GlobalContext);\r\n\r\n  if (!globalContext) {\r\n    return <></>;\r\n  }\r\n\r\n  if (globalContext.state.isAuthentified) {\r\n    return <Redirect to=\"/admin/dashboard\" />;\r\n  }\r\n\r\n  const submit = async (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    try {\r\n      const username = usernameInp.current?.value\r\n        ? usernameInp.current.value\r\n        : '';\r\n      const password = passwordInp.current?.value\r\n        ? passwordInp.current.value\r\n        : '';\r\n\r\n      await login(username, password);\r\n\r\n      globalContext.dispatch({ type: GlobalContextActions.HAS_LOGIN });\r\n\r\n      // setHasLogin(true);\r\n    } catch (err) {\r\n      console.error(err);\r\n      if (err.message) {\r\n        setError({ message: err.message });\r\n      } else {\r\n        setError({ message: 'Erreur serveur...' });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submit} className=\"form login\">\r\n      {error ? <Alert variant=\"danger\">{error.message}</Alert> : null}\r\n      <Input ref={usernameInp} placeholder=\"Nom d'utilisateur\" type=\"text\" className=\"input\"/>\r\n      <Input ref={passwordInp} placeholder=\"Mot de passe\" type=\"password\" className=\"input\" />\r\n      <Button type=\"submit\" variant=\"secondary\">Se connecter</Button>\r\n    </form>\r\n  );\r\n};\r\n","import { LoginForm } from '../organisms/LoginForm';\r\nimport React from 'react';\r\nimport '../atoms/logo.scss';\r\nimport { Logo } from '../atoms/Logo';\r\n\r\nexport const Login = () => {\r\n  return (\r\n    <>\r\n      <Logo className=\"login\"/>\r\n      <LoginForm />\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nexport const Home = () => {\r\n  const history = useHistory();\r\n  history.push('/login');\r\n  //Until this page is designed to welcome prospect or client, redirect straight to login page.\r\n  return (\r\n    <>\r\n      <h1>Bienvenue sur Clug App</h1>\r\n      <Link to=\"/login\">Login</Link>\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n  GlobalContext,\r\n  GlobalContextActions,\r\n} from '../../contexts/GlobalContext';\r\n\r\nexport const Logout = () => {\r\n  const globalCtxt = useContext(GlobalContext);\r\n  useEffect(() => {\r\n    if (globalCtxt?.state.isAuthentified) {\r\n      globalCtxt?.dispatch({ type: GlobalContextActions.LOGOUT });\r\n    }\r\n  }, [globalCtxt]);\r\n\r\n  const history = useHistory();\r\n  history.push('/login');\r\n\r\n  return (\r\n    <>\r\n      <h1>A bientôt !</h1>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { AdminRoutes } from './admin.routes';\r\n\r\n// ------------------------------------------ COMPONENTS IMPORT\r\nimport { AdminLayout } from '../components/template/AdminLayout';\r\nimport { BasicLayout } from '../components/template/BasicLayout';\r\nimport { Login } from '../components/pages/Login';\r\nimport { Home } from '../components/pages/Home';\r\nimport { Logout } from '../components/pages/Logout';\r\n\r\nexport const Routes = () => (\r\n  <Switch>\r\n    <Route path=\"/\" exact>\r\n      <BasicLayout>\r\n        <Home />\r\n      </BasicLayout>\r\n    </Route>\r\n\r\n    <Route path=\"/admin\">\r\n      <AdminLayout>\r\n        <AdminRoutes />\r\n      </AdminLayout>\r\n    </Route>\r\n\r\n    <Route path=\"/login\">\r\n      <BasicLayout>\r\n        <Login />\r\n      </BasicLayout>\r\n    </Route>\r\n\r\n    <Route path=\"/logout\">\r\n      <BasicLayout>\r\n        <Logout />\r\n      </BasicLayout>\r\n    </Route>\r\n\r\n    <Route>\r\n      <BasicLayout>\r\n        <h1>404: Nothing to see here....</h1>\r\n      </BasicLayout>\r\n    </Route>\r\n  </Switch>\r\n);\r\n","import React from 'react';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { Routes } from '../routes/routes';\r\nimport { GlobalContextProvider } from '../contexts/GlobalContext';\r\nimport '../index.scss';\r\n\r\ninterface IProps {}\r\n\r\nexport const App = (props: IProps) => {\r\n  return (\r\n    <GlobalContextProvider>\r\n      <Router>\r\n        <Routes />\r\n      </Router>\r\n    </GlobalContextProvider>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './components';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/clug-logo-w.6bd58774.svg\";","module.exports = __webpack_public_path__ + \"static/media/logout.6bbb8f06.svg\";"],"sourceRoot":""}