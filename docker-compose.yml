version: '3.7'

services:
  # Main Express.js application container
  backend:
    build: 
      context: ./packages/backend/
      dockerfile: Dockerfile.dev

    command: npm run docker:dev

    depends_on:
      - db

    volumes:
      # Mount each required directory and file independently instead of mounting
      # the entire current directory. Otherwise the `node_modules` directory
      # from the developer's machine is mounted into the container as well.
      # There is no guarantee that this machine is running the same architecture
      # as the container's image. In that case, packages with C code compiled on
      # the machine, such as bcrypt, might not work in the container.
      - './packages/backend/src:/code/src:ro'
      - './packages/backend/package.json:/code/package.json:ro'
      - './packages/backend/package-lock.json:/code/package-lock.json:ro'
      - './packages/backend/tsconfig.json:/code/tsconfig.json:ro'
      # Persist installed node_modules into a named volume.
      - 'api_node_modules_data:/code/node_modules'

    environment:
      DATABASE_NAME: clug-db
      DATABASE_HOST: db
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: .Clug-123
      JWT_SECRET: iE1oP/5tO0H9knqiqqaOvXQGDGyRSx0BxxnbkD7Lhzw=
      DATABASE_DROPSCHEMA: "false"
      DATABASE_SYNCHRONIZE: "true"

    ports:
      - 3001:3001

  frontend:
    build: 
      context: ./packages/frontend/
      dockerfile: Dockerfile.dev

    tty: true
    command: npm run start

    volumes:
      # Mount each required directory and file independently instead of mounting
      # the entire current directory. Otherwise the `node_modules` directory
      # from the developer's machine is mounted into the container as well.
      # There is no guarantee that this machine is running the same architecture
      # as the container's image. In that case, packages with C code compiled on
      # the machine, such as bcrypt, might not work in the container.
      - './packages/frontend/src:/code/src:ro'
      - './packages/frontend/public:/code/public:ro'
      - './packages/frontend/package.json:/code/package.json:ro'
      - './packages/frontend/package-lock.json:/code/package-lock.json:ro'
      - './packages/frontend/tsconfig.json:/code/tsconfig.json:ro'
      # Persist installed node_modules into a named volume.
      - 'frontend_node_modules_data:/code/node_modules'
    
    links:
      - backend

    ports:
      - 3000:3000
    #restart: always

  db:
    image: postgres:12-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: .Clug-123
      POSTGRES_DB: clug-db
    restart: always
    volumes:
      # Persist data in a named volume. Run `docker-compose down -v` to
      # permanently delete it.
      - "db_data:/var/lib/postgresql/data"
  
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

volumes:
  db_data:
  api_node_modules_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./packages/backend/node_modules
  frontend_node_modules_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./packages/frontend/node_modules